HOW-TO.TXT                                                         ThR
                                                            2004-04-17

How to prepare, edit, compile, revision and package the 
EtherNE software.

* Personal preferences *
- MAGXDESK desktop
- MUPFEL shell

- edit .S and .I files using DevPac2 editor
- edit .C and .H files using PKSedit

Note that this file serves primarily to document the development
process using my infrastructure.
Your's is likely different.


* Preparing the configuration *

The version numbering of the software is hardcoded
in the files DESWIT.H for C-files and DEVSWITP.I and DEVSWITD.I for 
assembler files.

Choosing between development version and production version is
done by copying either DEVSWITP.I or DEVSWITD.I over DEVSWIT.I.
There is no such thing for C-files.


* Compile parts of the package *

The whole compile process is controlled by the file MAKEFILE
The main criterium to select which part is the file BUS.I
BUS.I steers for which EtherNE hardware the software gets compiled.

There are entries in the makefile to compile for as specific *bus*.
Thus "make enec" on the command line would compile for EtherNEC
the cartridge bus hardware by first copying the appropriate file
over BUS.I.
A command like "make enec" will compile everything for this hardware:
STing and MAGXNet drivers and hardware test software.

To compile for a specific bus *and* specific IP stack you would
first copy the relevant file over BUS.I then do "make etherne.stx"
or "make etherne.mif". Then you would rename the output files
to signal in the file name for what bus it was compiled. E.g.:
mv etherne.stx enec.stx



* Compile the whole package *

"make all" compiles everything.


* Managing revisions *

After a stable package has been established, I do a CIALL2.MUP
to check in all source files using the RCS revision control system.
RCS puts all files in the sub directory RCS.

Using MARKALL2.MUP I apply a symbolic name to a complete set of
source files that make up a complete distribution package.
E.g for version 1.4 of the package from 2002-06-08 I did a
"MARKALL2.MUP PubRel1_14"

With a COALL2.MUP I just check out a complete set of source files
again.


* Putting a distribution package together *

From within directory SRC you do a make package to generate a
.ZIP file. I manually delete the directory OBSOLETE and the
PPTs from it.



Copyright 2001-2004 Dr. Thomas Redelberger.

redetho@gmx.de
http://home.arcor.de/thomas.redelberger

